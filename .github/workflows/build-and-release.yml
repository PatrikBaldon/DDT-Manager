name: Build and Release DDT Manager

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      run: npm install
      
    - name: Run Django migrations
      run: python manage.py migrate
      
    - name: Collect static files
      run: python manage.py collectstatic --noinput
      
    - name: Build Electron app
      run: npm run build
      
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ddt-manager-windows
        path: |
          dist/DDT_Manager_Setup.exe
          dist/DDT_Manager_Portable.exe
          
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ddt-manager-macos
        path: |
          dist/DDT Manager-*.dmg
          
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ddt-manager-linux
        path: |
          dist/DDT Manager-*.AppImage

  create-installer-package:
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: ddt-manager-windows
        path: dist/
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install
        
    - name: Create installer package
      run: |
        # Crea directory per package
        mkdir -p installer\dist\DDT_Manager_Package
        
        # Copia installer
        copy dist\DDT_Manager_Setup.exe installer\dist\DDT_Manager_Package\
        copy dist\DDT_Manager_Portable.exe installer\dist\DDT_Manager_Package\
        
        # Copia script di installazione
        copy installer\scripts\download-and-install.ps1 installer\dist\DDT_Manager_Package\
        copy installer\scripts\uninstall-ddt.ps1 installer\dist\DDT_Manager_Package\
        copy installer\windows\DDT_Manager_Downloader.bat installer\dist\DDT_Manager_Package\
        
        # Copia documentazione
        copy README.md installer\dist\DDT_Manager_Package\README.txt
        copy LICENSE installer\dist\DDT_Manager_Package\
        
        # Crea script di avvio rapido
        echo @echo off > installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo DDT Manager - Avvio Rapido >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo ========================== >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo. >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo 1. Download e Installazione Automatica (Raccomandato) >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo 2. Installazione Manuale >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo 3. Disinstallazione >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo echo. >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo set /p choice="Scegli un'opzione (1-3): " >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo if "%%choice%%"=="1" ( >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo     call DDT_Manager_Downloader.bat >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo ) else if "%%choice%%"=="2" ( >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo     DDT_Manager_Setup.exe >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo ) else if "%%choice%%"=="3" ( >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo     powershell -ExecutionPolicy Bypass -File uninstall-ddt.ps1 >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo ) else ( >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo     echo Opzione non valida >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo     pause >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        echo ) >> installer\dist\DDT_Manager_Package\Avvio_Rapido.bat
        
    - name: Upload installer package
      uses: actions/upload-artifact@v4
      with:
        name: ddt-manager-installer-package
        path: installer/dist/DDT_Manager_Package/

  release:
    runs-on: ubuntu-latest
    needs: [build, create-installer-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: DDT Manager ${{ github.ref_name }}
        body: |
          ## üöÄ DDT Manager ${{ github.ref_name }}
          
          ### üì¶ Download e Installazione
          
          **Per Windows (Raccomandato):**
          1. Scarica `DDT_Manager_Package.zip`
          2. Estrai l'archivio
          3. Esegui `Avvio_Rapido.bat`
          4. Scegli "Download e Installazione Automatica"
          
          **Installazione Manuale:**
          - Windows: `DDT_Manager_Setup.exe`
          - macOS: `DDT Manager-*.dmg`
          - Linux: `DDT Manager-*.AppImage`
          
          ### ‚ú® Novit√† in questa versione
          - Installazione automatica completa
          - Verifica e installazione prerequisiti
          - Interfaccia utente migliorata
          - Gestione errori avanzata
          
          ### üîß Prerequisiti
          - Windows 10/11 (64-bit)
          - Python 3.8+ (installato automaticamente)
          - Node.js 16+ (installato automaticamente)
          
          ### üìö Documentazione
          - [Guida Installazione](https://github.com/PatrikBaldon/DDT-Application/blob/main/installer/README_INSTALLER.md)
          - [Guida Electron](https://github.com/PatrikBaldon/DDT-Application/blob/main/README_ELECTRON.md)
          
          ### üêõ Segnalazione Bug
          Se riscontri problemi, apri una [issue](https://github.com/PatrikBaldon/DDT-Application/issues) su GitHub.
          
        files: |
          artifacts/ddt-manager-windows/DDT_Manager_Setup.exe
          artifacts/ddt-manager-windows/DDT_Manager_Portable.exe
          artifacts/ddt-manager-macos/DDT Manager-*.dmg
          artifacts/ddt-manager-linux/DDT Manager-*.AppImage
          artifacts/ddt-manager-installer-package/DDT_Manager_Package.zip
        draft: false
        prerelease: false
